{
	"contentString": "/** \n * <p>Returns the weighted variance of the entries in the specified portion of the input array, or <code>Double.NaN</code> if the designated subarray is empty.</p> <p> Uses the formula <pre> &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1) </pre> where weightedMean is the weighted mean</p> <p> This formula will not return the same result as the unweighted variance when all weights are equal, unless all weights are equal to 1. The formula assumes that weights are to be treated as \"expansion values,\" as will be the case if for example the weights represent frequency counts. To normalize weights so that the denominator in the variance computation equals the length of the input vector minus one, use <pre> <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code> </pre> <p> Returns 0 for a single-value (i.e. length = 1) sample.</p> <p> Throws <code>IllegalArgumentException</code> if any of the following are true: <ul><li>the values array is null</li> <li>the weights array is null</li> <li>the weights array does not have the same length as the values array</li> <li>the weights array contains one or more infinite values</li> <li>the weights array contains one or more NaN values</li> <li>the weights array contains negative values</li> <li>the start and length arguments do not determine a valid array</li> </ul></p> <p> Does not change the internal state of the statistic.</p> <p> Throws <code>IllegalArgumentException</code> if either array is null.</p>\n * @param values the input array\n * @param weights the weights array\n * @param begin index of the first array element to include\n * @param length the number of elements to include\n * @return the weighted variance of the values or Double.NaN if length = 0\n * @throws IllegalArgumentException if the parameters are not valid\n * @since 2.1\n */\npublic double evaluate(final double[] values,final double[] weights,final int begin,final int length){\n  double var=Double.NaN;\n  if (test(values,weights,begin,length)) {\n    clear();\n    if (length == 1) {\n      var=0.0;\n    }\n else     if (length > 1) {\n      Mean mean=new Mean();\n      double m=mean.evaluate(values,weights,begin,length);\n      var=evaluate(values,weights,m,begin,length);\n    }\n  }\n  return var;\n}\n",
	"endLine": 329,
	"fixedFile": "/home/xushicheng/dataset/defects4j/projects/Math/Math_41_buggy/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
	"methodName": "org.apache.commons.math.stat.descriptive.moment.Variance#double#evaluate#?,double[],double[],int,int",
	"startLine": 314
}